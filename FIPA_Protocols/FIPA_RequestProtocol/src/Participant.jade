module FIPArequest.agents
import FIPArequest.onto.OntologyRequest
import FIPArequest.onto.NotAccepted
import FIPArequest.onto.compute_request
import FIPArequest.onto.operation
import FIPArequest.onto.Accepted
import FIPArequest.onto.TaskFailed
import FIPArequest.onto.TaskSuccess
import FIPArequest.onto.TaskSuccessResult

# An agent Partecipant for FIPA request protocol
# The Partecipant waits for a request and decide to execute or not
# in case of execution, it can send a message of agree
# in case of non-execution, it sends a message of refuse
#
# @Riccardo Nazzari 20044680
#
# Note:
# > It is possible to simulate a cancel failure using the command 
#   "send message failure(send_request(data_sent, operation_sent), CancelNotAccepted) to sender of message"
#   That is now commented.
agent Partecipant uses ontology OntologyRequest
    
    on create do
        log "***Partecipant created.***"    
        activate WaitForRequest
           
# WaitForRequest is a cyclic behaviour that waits a request
# submitted by an Initiator agent.
cyclic behaviour WaitForRequest 
    for agent Partecipant
    uses ontology OntologyRequest
    
    on activate do
        log "***WaitForRequest behaviour activated.***"
       
    property data as compute_request
    property op_req as operation
    property who_sent as aid
        
    # event-handler for a message request
    on message request send_request(sent, operations) do

        do evaluateRequest with 
            sent, 
            sender of message,
            operations
    
    # event-handler for a message cancel              
    on message cancel(send_request(data_sent, operation_sent)) when id_of_message of data_sent = id_of_message of data do
            send message inform(CancelAccepted(id_of_message of data)) to sender of message
            #send message failure(send_request(data_sent, operation_sent), CancelNotAccepted) to sender of message
     
    # event-handler for an inform message
    # it starts the computation      
    on message inform(Acknowledge) do
        do compute with data, op_req, who_sent
    
    # procedure to execute the request      
    procedure compute with
        data as compute_request,
        op_req as operation,
        who_sent as aid
        do
  
        if value2 of op_req = 0 or value1 of op_req = 0 do
            # we can't divide by zero so we return a message failure
            if operator of op_req = "DIV" and value2 of op_req = 0 do
                activate RequestFailed(data, who_sent, op_req)after "PT3S" as duration
            # in this case isn't necessary to perform the operation
            else if operator of op_req = "ADD" or operator of op_req = "SUB" do
                activate SuccessNoInformResult(who_sent, id_of_message of data) after "PT3S" as duration
            else if operator of op_req = "DIV" or operator of op_req = "MUL" do
                activate SuccessWithInformResult(who_sent, 0, id_of_message of data) after "PT3S" as duration
        # in any other case we perform the operation and send a message with the value
        else do
              result = executeOperation(value1 of op_req, value2 of op_req, operator of  op_req)
              activate SuccessWithInformResult(who_sent, result, id_of_message of data) after "PT3S" as duration    
        
    # procedure to evaluate a request        
    procedure evaluateRequest with
        # req is what is requested
        req as compute_request,
        # aid of the sender
        who_sent as aid,
        # operation requested
        op_req as operation
        do       
        data of this = req
        who_sent of this = who_sent
        op_req of this = op_req        
        # save the operator requested
        symbol = operator of op_req 
        # condition necessary for computing
        # if the Initiator sends an operation that isn't "ADD", "SUB", "MUL" or "DIV"
        # the Partecipant refuse the operation
        if symbol = "ADD" or symbol = "SUB" or symbol = "MUL" or symbol = "DIV" do          
            # setting the value "agree" in the message as true
            agreed of req = true
            # if the Initiator request a notification, the Partecipant send it
            if notification_necessary of req = true do
                send message agree(send_request(req, op_req), Accepted) to who_sent
            else do
                do compute with data, op_req, who_sent
        else do
            refused of req = true
            send message refuse(send_request(req, op_req), NotAccepted) to who_sent
           
# function to compute the operation
function executeOperation(opt1 as integer, opt2 as integer, comand as text) as integer do
        
        if comand = "ADD" do
            return opt1 + opt2
        else if comand = "SUB" do
            return opt1 - opt2
        else if comand = "MUL" do
            return opt1 * opt2
        else do
            return opt1 / opt2
             
# behaviour that sends a message failure
one shot behaviour RequestFailed
        for agent Partecipant
        uses ontology OntologyRequest

        property requested as compute_request
        property who_sent as aid
        property op_req as operation
        
        on create with
            requested as compute_request,
            who_sent as aid,
            op_req as operation
            do
            requested of this = requested
            who_sent of this = who_sent
            op_req of this = op_req
            
        on execute do
            send message failure(send_request(requested, op_req), TaskFailed) to who_sent
        
# behaviour that sends a message without sending the result
one shot behaviour SuccessNoInformResult
        for agent Partecipant
        uses ontology OntologyRequest
        
        property who_sent as aid
        property id_of_message as integer
        
        on create with
            who_sent as aid,
            id_of_message as integer
            do  
            who_sent of this = who_sent
            id_of_message of this = id_of_message
            
        on execute do
            send message inform(TaskSuccess(id_of_message)) to who_sent
        
# behaviour that sends a message with the result
one shot behaviour SuccessWithInformResult
        for agent Partecipant
        uses ontology OntologyRequest
        
        property who_sent as aid
        property result as integer
        property id_of_message as integer
        
        on create with
            who_sent as aid,
            result as integer,
            id_of_message as integer
            do
            who_sent of this = who_sent
            result of this = result
            id_of_message of this = id_of_message
        
        on execute do
            send message inform(TaskSuccessResult(result, id_of_message)) to who_sent