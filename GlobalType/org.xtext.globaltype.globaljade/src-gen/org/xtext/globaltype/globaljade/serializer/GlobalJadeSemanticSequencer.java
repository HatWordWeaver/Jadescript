/*
 * generated by Xtext 2.34.0
 */
package org.xtext.globaltype.globaljade.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.globaltype.globaljade.globalJade.Choice_rule;
import org.xtext.globaltype.globaljade.globalJade.Continue_Recursion;
import org.xtext.globaltype.globaljade.globalJade.End_Recursion;
import org.xtext.globaltype.globaljade.globalJade.End_message;
import org.xtext.globaltype.globaljade.globalJade.For_loop;
import org.xtext.globaltype.globaljade.globalJade.GlobalJadePackage;
import org.xtext.globaltype.globaljade.globalJade.Message;
import org.xtext.globaltype.globaljade.globalJade.Model;
import org.xtext.globaltype.globaljade.globalJade.MultipleRole;
import org.xtext.globaltype.globaljade.globalJade.OneRole;
import org.xtext.globaltype.globaljade.globalJade.Protocol;
import org.xtext.globaltype.globaljade.globalJade.Recursion;
import org.xtext.globaltype.globaljade.globalJade.Roles;
import org.xtext.globaltype.globaljade.services.GlobalJadeGrammarAccess;

@SuppressWarnings("all")
public class GlobalJadeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GlobalJadeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GlobalJadePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GlobalJadePackage.CHOICE_RULE:
				sequence_Choice_rule(context, (Choice_rule) semanticObject); 
				return; 
			case GlobalJadePackage.CONTINUE_RECURSION:
				sequence_Continue_Recursion(context, (Continue_Recursion) semanticObject); 
				return; 
			case GlobalJadePackage.END_RECURSION:
				sequence_End_Recursion(context, (End_Recursion) semanticObject); 
				return; 
			case GlobalJadePackage.END_MESSAGE:
				sequence_End_message(context, (End_message) semanticObject); 
				return; 
			case GlobalJadePackage.FOR_LOOP:
				sequence_For_loop(context, (For_loop) semanticObject); 
				return; 
			case GlobalJadePackage.MESSAGE:
				sequence_Message(context, (Message) semanticObject); 
				return; 
			case GlobalJadePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case GlobalJadePackage.MULTIPLE_ROLE:
				sequence_MultipleRole(context, (MultipleRole) semanticObject); 
				return; 
			case GlobalJadePackage.ONE_ROLE:
				sequence_OneRole(context, (OneRole) semanticObject); 
				return; 
			case GlobalJadePackage.PROTOCOL:
				sequence_Protocol(context, (Protocol) semanticObject); 
				return; 
			case GlobalJadePackage.RECURSION:
				sequence_Recursion(context, (Recursion) semanticObject); 
				return; 
			case GlobalJadePackage.ROLES:
				sequence_Roles(context, (Roles) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Choice_rule returns Choice_rule
	 *
	 * Constraint:
	 *     (role_name=NAME messages+=Message branch+=Protocol (messages+=Message branch+=Protocol)*)
	 * </pre>
	 */
	protected void sequence_Choice_rule(ISerializationContext context, Choice_rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Continue_Recursion returns Continue_Recursion
	 *
	 * Constraint:
	 *     name=NAME
	 * </pre>
	 */
	protected void sequence_Continue_Recursion(ISerializationContext context, Continue_Recursion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GlobalJadePackage.Literals.CONTINUE_RECURSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GlobalJadePackage.Literals.CONTINUE_RECURSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContinue_RecursionAccess().getNameNAMETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     End_Recursion returns End_Recursion
	 *
	 * Constraint:
	 *     name=NAME
	 * </pre>
	 */
	protected void sequence_End_Recursion(ISerializationContext context, End_Recursion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GlobalJadePackage.Literals.END_RECURSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GlobalJadePackage.Literals.END_RECURSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnd_RecursionAccess().getNameNAMETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     End_message returns End_message
	 *
	 * Constraint:
	 *     end+=END_MEX
	 * </pre>
	 */
	protected void sequence_End_message(ISerializationContext context, End_message semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     For_loop returns For_loop
	 *
	 * Constraint:
	 *     (name=NAME roleTarget=NAME branch+=Protocol)
	 * </pre>
	 */
	protected void sequence_For_loop(ISerializationContext context, For_loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Message returns Message
	 *
	 * Constraint:
	 *     (type=TYPE_MESSAGE content+=CONTENT content+=CONTENT* sender=NAME receiver=NAME)
	 * </pre>
	 */
	protected void sequence_Message(ISerializationContext context, Message semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=NAME roles+=Roles protocol+=Protocol)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Role returns MultipleRole
	 *     MultipleRole returns MultipleRole
	 *
	 * Constraint:
	 *     (name=NAME ref=[OneRole|NAME])
	 * </pre>
	 */
	protected void sequence_MultipleRole(ISerializationContext context, MultipleRole semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GlobalJadePackage.Literals.ROLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GlobalJadePackage.Literals.ROLE__NAME));
			if (transientValues.isValueTransient(semanticObject, GlobalJadePackage.Literals.MULTIPLE_ROLE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GlobalJadePackage.Literals.MULTIPLE_ROLE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultipleRoleAccess().getNameNAMETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultipleRoleAccess().getRefOneRoleNAMETerminalRuleCall_3_0_1(), semanticObject.eGet(GlobalJadePackage.Literals.MULTIPLE_ROLE__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Role returns OneRole
	 *     OneRole returns OneRole
	 *
	 * Constraint:
	 *     name=NAME
	 * </pre>
	 */
	protected void sequence_OneRole(ISerializationContext context, OneRole semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GlobalJadePackage.Literals.ROLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GlobalJadePackage.Literals.ROLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOneRoleAccess().getNameNAMETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Protocol returns Protocol
	 *
	 * Constraint:
	 *     (
	 *         actions+=Message | 
	 *         actions+=Choice_rule | 
	 *         actions+=For_loop | 
	 *         actions+=End_message | 
	 *         actions+=Recursion | 
	 *         actions+=End_Recursion | 
	 *         actions+=Continue_Recursion
	 *     )*
	 * </pre>
	 */
	protected void sequence_Protocol(ISerializationContext context, Protocol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Recursion returns Recursion
	 *
	 * Constraint:
	 *     name=NAME
	 * </pre>
	 */
	protected void sequence_Recursion(ISerializationContext context, Recursion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GlobalJadePackage.Literals.RECURSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GlobalJadePackage.Literals.RECURSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRecursionAccess().getNameNAMETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Roles returns Roles
	 *
	 * Constraint:
	 *     (roles+=Role roles+=Role*)
	 * </pre>
	 */
	protected void sequence_Roles(ISerializationContext context, Roles semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
