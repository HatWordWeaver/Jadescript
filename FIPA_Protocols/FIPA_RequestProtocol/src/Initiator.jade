module FIPArequest.agents
import FIPArequest.onto.OntologyRequest
import FIPArequest.onto.compute_request
import FIPArequest.onto.NotAccepted
import FIPArequest.onto.TaskFailed
import FIPArequest.onto.operation
import FIPArequest.onto.CancelAccepted

# agent Initiator for FIPA request protocol
# The Initiator agent send a request to a Partecipant agent
#
# Riccardo Nazzari 20044680

agent Initiator uses ontology OntologyRequest

    on create with
            notification as boolean,
            conversation_id as integer,
            value1 as integer,
            value2 as integer,
            operator as text
        do
            log "*** Initiator created. ***"
            # create the concept of the ontology for the messages
            # set false - false for agreed and refused values
            # set notification as the flag to request a notify if the
            #     request is accepted
            # set conversation_id (unique for every conversation)
            sent = compute_request(false, false, notification, conversation_id)
            sent_op = operation(value1, value2, operator)
            # send the message to an agent called "Partecipant"
            # Note: is also possible to require a name in the initialization, in order
            # to decide who should be contacted.
            send message request send_request(sent, sent_op) to "Partecipant"@
            # finally the behaviour is activated
            if notification = false do
                activate WaitForResult(conversation_id)
            else do
                activate WaitForResponse(conversation_id)

# cyclic behaviour that waits for a response from a Partecipant agent
#
# Note:
# > It is possible to simulate a cancel request changing the value of abort to 0
#     
cyclic behaviour WaitForResponse
    for agent Initiator
    uses ontology OntologyRequest

    property conversation_id as integer
    # abort is a special value used to simulate a cancel request after receiving an agree message
    property abort = 1 as integer

    # event handler for creation
    on create with
        conversation_id as integer
        do
        conversation_id of this = conversation_id

    # it just prints a log
    on activate do
        log "*** Wait for response activated. ***"
        
    # in case of a message refuse it deactivates this behaviour
    on message refuse(send_request(response_message, response_op), NotAccepted) do
        log "Request refused by Partecipant."
        deactivate this
    
    # in case of a message agree it activates the WaitForResult cyclic behaviour
    # and deactivates this behaviour 
    on message agree(send_request(response_message, response_op), Accepted) when id_of_message of response_message = conversation_id do
            log "Request accepted by Partecipant."
            # used to simulate a cancel request
            if abort = 0 do
                #send message cancel(send_request(response_message, response_op)) to "Partecipant"@
                activate CancelRequest(response_message, response_op) after "PT1S" as duration
                activate WaitForConfirmCancel(conversation_id)
                deactivate this
            else do
                send message inform(Acknowledge) to "Partecipant"@
                activate WaitForResult(conversation_id)
                deactivate this
    
# cyclic behaviour that waits for a cancel confirmation by Partecipant 
cyclic behaviour WaitForConfirmCancel
    for agent Initiator
    uses ontology OntologyRequest
    
    property conversation_id as integer
    
    on create with
        conversation_id as integer
        do
        conversation_id of this = conversation_id
    
    # event handler if cancel request is accepted
    on message inform(CancelAccepted(id_of_request)) when id_of_request= conversation_id do
        log "Request deleted by Partecipant."
        deactivate this
     
    # event handler if cancel request is not accepted
    on message failure(send_request(data_sent, operation_sent), CancelNotAccepted) when id_of_message of data_sent = conversation_id do
        log "Partecipant cant delete the request."
        send message inform(Acknowledge) to "Partecipant"@
        # wait for result of request
        activate WaitForResult(conversation_id)
        deactivate this   
# Cyclic behaviour that waits for the result that will be sent by Partecipant       
cyclic behaviour WaitForResult
    for agent Initiator
    uses ontology OntologyRequest
    
    property conversation_id as integer
    
    on create with
        conversation_id as integer
        do
        conversation_id of this = conversation_id
    
    # prints the result
    on message inform(TaskSuccessResult(result, id_of_message)) when id_of_message = conversation_id do
        log "Result: " + result + "."
        deactivate this
        
    # prints a failure message
    on message failure(send_request(response_message, response_op), TaskFailed) when id_of_message of response_message = conversation_id do
        log "Failure occurred."
        deactivate this
    
    # prints a simple message to inform that the task has been completed  
    on message inform(TaskSuccess(id_of_message)) when id_of_message = conversation_id do
        log "Task completed."
        deactivate this

# one shot behaviour that cancel a request
one shot behaviour CancelRequest
    for agent Initiator
    uses ontology OntologyRequest
    
    property data as compute_request
    property operation_requested as operation
    
    on create with
        data as compute_request,
        operation_requested as operation
        do
        
        data of this = data
        operation_requested of this = operation_requested
        
    on execute do
        send message cancel(send_request(data, operation_requested)) to "Partecipant"@
        
        
        