/*
 * generated by Xtext 2.34.0
 */
grammar InternalGlobalJade;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.globaltype.globaljade.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.globaltype.globaljade.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.globaltype.globaljade.services.GlobalJadeGrammarAccess;

}

@parser::members {

 	private GlobalJadeGrammarAccess grammarAccess;

    public InternalGlobalJadeParser(TokenStream input, GlobalJadeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GlobalJadeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getProtocolsProtocolsParserRuleCall_0());
			}
			lv_protocols_0_0=ruleProtocols
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"protocols",
					lv_protocols_0_0,
					"org.xtext.globaltype.globaljade.GlobalJade.Protocols");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleProtocols
entryRuleProtocols returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProtocolsRule()); }
	iv_ruleProtocols=ruleProtocols
	{ $current=$iv_ruleProtocols.current; }
	EOF;

// Rule Protocols
ruleProtocols returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='global'
		{
			newLeafNode(otherlv_0, grammarAccess.getProtocolsAccess().getGlobalKeyword_0());
		}
		otherlv_1='protocol'
		{
			newLeafNode(otherlv_1, grammarAccess.getProtocolsAccess().getProtocolKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_GENERAL_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getProtocolsAccess().getNameGENERAL_NAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProtocolsRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.globaltype.globaljade.GlobalJade.GENERAL_NAME");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getProtocolsAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProtocolsAccess().getRolesRoleParserRuleCall_4_0());
				}
				lv_roles_4_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProtocolsRule());
					}
					add(
						$current,
						"roles",
						lv_roles_4_0,
						"org.xtext.globaltype.globaljade.GlobalJade.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getProtocolsAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	iv_ruleRole=ruleRole
	{ $current=$iv_ruleRole.current; }
	EOF;

// Rule Role
ruleRole returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='role'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoleAccess().getRoleKeyword_0());
		}
		(
			(
				lv_role_1_0=RULE_GENERAL_NAME
				{
					newLeafNode(lv_role_1_0, grammarAccess.getRoleAccess().getRoleGENERAL_NAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoleRule());
					}
					setWithLastConsumed(
						$current,
						"role",
						lv_role_1_0,
						"org.xtext.globaltype.globaljade.GlobalJade.GENERAL_NAME");
				}
			)
		)
	)
;

RULE_GENERAL_NAME : ('A'..'Z')+ ('a'..'z')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
