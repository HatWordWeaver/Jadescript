module agents
import EnglishAuctionOntology.EnglishAuction

# agent Bidder for English Auction protocol.
#
# Riccardo Nazzari - 20044680
agent Bidder
    # maxMoney that bidder can spend
    property maxMoney as integer
    # property for WaitForStart behaviour
    property waitForStart as WaitForStart
    property waitResponse as WaitResponse
    # on create
    #   with money as a parameter
    #   1. simply assign the parameter to maxMoney property
    #   2. one-shot behaviour SendPresenceAuction is activated, in order to send a message to
    #   the Auctioneer;
    #   3. Bidder agent waits for the start of the auction, activating a cyclic behaviour called
    #   WaitForStart that will handle the incoming message;
    on create with 
        money as integer
        do
        maxMoney = money
        activate SendPresenceAuction
        activate waitForStart
        
# one-shot behaviour used to send a message to Auctioneer
# saying that bidder is partecipating to the auction.        
one shot behaviour SendPresenceAuction
    for agent Bidder
    uses ontology EnglishAuction
    
    # event-handler for execution
    on execute do
        log "sending message to auctioneer"
        send message inform(Partecipating) to "Auctioneer"@
        
# cyclic-behaviour that Wait a message from Auctioneer
# saying that the auction is started.      
cyclic behaviour WaitForStart
    for agent Bidder
    uses ontology EnglishAuction
    
    # event-handler for inform message
    #   this message is sent from Auctioneer and says that Auction is started.
    #   Auctioneer will send a propose after this message.
    on message inform(StartAuction) do
        log "Auction started."
    
    # event-handler for cfp message
    #   this is a message about the Auction, where the price is well-seen in "price" variable received
    #   if the price is less than the budget (maxMoney), a propose will be sent
    #   there is nothing else to do.    
    on message cfp(AuctionTime(ObjectOnAuction(nameObject, 
                                               codeObject, 
                                               price,
                                               bidderWinning,
                                               timeExpire
                                               )), StartAuction) do
        #log "Received:\nname: " + nameObject + "\ncodeObject: " + codeObject + "\nprice: " + price + "\ntimeExpire: " + timeExpire
        # condition to accept the price proposed
        if price <= maxMoney do
        #if price+incrCost <= maxMoney do  
            #if bidderWinning â‰  name of agent do
                log"bidderWinning: " + bidderWinning + " | I accept: " + price
                send message propose(AuctionTime(ObjectOnAuction(nameObject, 
                                                             codeObject, 
                                                             price,#+incrCost,
                                                             name of agent,
                                                             timeExpire
                                                             )), Propose) to "Auctioneer"@

        # if is higher than maxMoney, simply doesn't send message
        else do
            log "It's over. Too expensive for us."
    # event-handler for message agree sent by Auctioneer            
    on message accept_proposal(AuctionTime(ObjectOnAuction(nameObject, codeObject, priceProposed, bidder, timeExpire)), AcceptPropose) do
            log "Accepted."
    # event-handler for message refuse sent by Auctioneer
    on message reject_proposal do
            log "Refused."
            
    on message inform(EndAuctionMessage) do
        activate waitResponse
        deactivate this
    
    
cyclic behaviour WaitResponse
    for agent Bidder
    uses ontology EnglishAuction
    
    on activate do
        log "Waiting for response..."
    
    on message request(WinCost(price)) do
        log "Just won with price of " + price
        
    on message inform(NotEnoughMoney) do
        log "Unlucky, not enought money proposed."