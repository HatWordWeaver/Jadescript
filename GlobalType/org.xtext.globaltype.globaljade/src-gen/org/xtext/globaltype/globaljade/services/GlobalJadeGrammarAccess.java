/*
 * generated by Xtext 2.34.0
 */
package org.xtext.globaltype.globaljade.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GlobalJadeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProtocolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProtocolNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProtocolNameNAMETerminalRuleCall_2_0 = (RuleCall)cProtocolNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRolesRolesParserRuleCall_4_0 = (RuleCall)cRolesAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cProtocolAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cProtocolProtocolParserRuleCall_7_0 = (RuleCall)cProtocolAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///*
		// * file extension: gbjade
		// */
		//Model:
		//    // global protocol declaration
		//    'global' 'protocol' protocolName=NAME '(' roles=Roles ')'
		//    '{'
		//        protocol+=Protocol
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// global protocol declaration
		//'global' 'protocol' protocolName=NAME '(' roles=Roles ')'
		//'{'
		//    protocol+=Protocol
		//'}'
		public Group getGroup() { return cGroup; }
		
		//// global protocol declaration
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//'protocol'
		public Keyword getProtocolKeyword_1() { return cProtocolKeyword_1; }
		
		//protocolName=NAME
		public Assignment getProtocolNameAssignment_2() { return cProtocolNameAssignment_2; }
		
		//NAME
		public RuleCall getProtocolNameNAMETerminalRuleCall_2_0() { return cProtocolNameNAMETerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//roles=Roles
		public Assignment getRolesAssignment_4() { return cRolesAssignment_4; }
		
		//Roles
		public RuleCall getRolesRolesParserRuleCall_4_0() { return cRolesRolesParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//protocol+=Protocol
		public Assignment getProtocolAssignment_7() { return cProtocolAssignment_7; }
		
		//Protocol
		public RuleCall getProtocolProtocolParserRuleCall_7_0() { return cProtocolProtocolParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class RolesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Roles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRolesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRolesRoleParserRuleCall_0_0 = (RuleCall)cRolesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRolesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRolesRoleParserRuleCall_1_1_0 = (RuleCall)cRolesAssignment_1_1.eContents().get(0);
		
		//Roles:
		//    roles+=Role (',' roles+=Role)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//roles+=Role (',' roles+=Role)*
		public Group getGroup() { return cGroup; }
		
		//roles+=Role
		public Assignment getRolesAssignment_0() { return cRolesAssignment_0; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_0_0() { return cRolesRoleParserRuleCall_0_0; }
		
		//(',' roles+=Role)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//roles+=Role
		public Assignment getRolesAssignment_1_1() { return cRolesAssignment_1_1; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_1_1_0() { return cRolesRoleParserRuleCall_1_1_0; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Role");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRoleOneParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRoleMultipleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Role:
		//    RoleOne | RoleMultiple
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RoleOne | RoleMultiple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RoleOne
		public RuleCall getRoleOneParserRuleCall_0() { return cRoleOneParserRuleCall_0; }
		
		//RoleMultiple
		public RuleCall getRoleMultipleParserRuleCall_1() { return cRoleMultipleParserRuleCall_1; }
	}
	public class RoleOneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.RoleOne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RoleOne:
		//    'role' name=NAME
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'role' name=NAME
		public Group getGroup() { return cGroup; }
		
		//'role'
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
	}
	public class RoleMultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.RoleMultiple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultroleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefRoleOneCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefRoleOneNAMETerminalRuleCall_3_0_1 = (RuleCall)cRefRoleOneCrossReference_3_0.eContents().get(1);
		
		//RoleMultiple:
		//    'multrole' name=NAME ':' ref=[RoleOne | NAME]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'multrole' name=NAME ':' ref=[RoleOne | NAME]
		public Group getGroup() { return cGroup; }
		
		//'multrole'
		public Keyword getMultroleKeyword_0() { return cMultroleKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//ref=[RoleOne | NAME]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }
		
		//[RoleOne | NAME]
		public CrossReference getRefRoleOneCrossReference_3_0() { return cRefRoleOneCrossReference_3_0; }
		
		//NAME
		public RuleCall getRefRoleOneNAMETerminalRuleCall_3_0_1() { return cRefRoleOneNAMETerminalRuleCall_3_0_1; }
	}
	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Protocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtocolAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cActionsAlternatives_1_0 = (Alternatives)cActionsAssignment_1.eContents().get(0);
		private final RuleCall cActionsMessageParserRuleCall_1_0_0 = (RuleCall)cActionsAlternatives_1_0.eContents().get(0);
		private final RuleCall cActionsChoiceParserRuleCall_1_0_1 = (RuleCall)cActionsAlternatives_1_0.eContents().get(1);
		private final RuleCall cActionsForEachParserRuleCall_1_0_2 = (RuleCall)cActionsAlternatives_1_0.eContents().get(2);
		private final RuleCall cActionsRecursionParserRuleCall_1_0_3 = (RuleCall)cActionsAlternatives_1_0.eContents().get(3);
		private final RuleCall cActionsCloseRecursionParserRuleCall_1_0_4 = (RuleCall)cActionsAlternatives_1_0.eContents().get(4);
		
		//Protocol:
		//    {Protocol} (actions+=(Message
		//               | Choice
		//               | ForEach
		//               | Recursion
		//               | CloseRecursion
		//               ))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Protocol} (actions+=(Message
		//           | Choice
		//           | ForEach
		//           | Recursion
		//           | CloseRecursion
		//           ))*
		public Group getGroup() { return cGroup; }
		
		//{Protocol}
		public Action getProtocolAction_0() { return cProtocolAction_0; }
		
		//(actions+=(Message
		//              | Choice
		//              | ForEach
		//              | Recursion
		//              | CloseRecursion
		//              ))*
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }
		
		//(Message
		//               | Choice
		//               | ForEach
		//               | Recursion
		//               | CloseRecursion
		//               )
		public Alternatives getActionsAlternatives_1_0() { return cActionsAlternatives_1_0; }
		
		//Message
		public RuleCall getActionsMessageParserRuleCall_1_0_0() { return cActionsMessageParserRuleCall_1_0_0; }
		
		//Choice
		public RuleCall getActionsChoiceParserRuleCall_1_0_1() { return cActionsChoiceParserRuleCall_1_0_1; }
		
		//ForEach
		public RuleCall getActionsForEachParserRuleCall_1_0_2() { return cActionsForEachParserRuleCall_1_0_2; }
		
		//Recursion
		public RuleCall getActionsRecursionParserRuleCall_1_0_3() { return cActionsRecursionParserRuleCall_1_0_3; }
		
		//CloseRecursion
		public RuleCall getActionsCloseRecursionParserRuleCall_1_0_4() { return cActionsCloseRecursionParserRuleCall_1_0_4; }
	}
	public class RecursionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Recursion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Recursion:
		//    'rec' name=NAME ':'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rec' name=NAME ':'
		public Group getGroup() { return cGroup; }
		
		//'rec'
		public Keyword getRecKeyword_0() { return cRecKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}
	public class CloseRecursionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.CloseRecursion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRecursionVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRecursionVariableRecursionCrossReference_1_0 = (CrossReference)cRecursionVariableAssignment_1.eContents().get(0);
		private final RuleCall cRecursionVariableRecursionNAMETerminalRuleCall_1_0_1 = (RuleCall)cRecursionVariableRecursionCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CloseRecursion:
		//    'loop' recursionVariable=[Recursion |NAME] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'loop' recursionVariable=[Recursion |NAME] ';'
		public Group getGroup() { return cGroup; }
		
		//'loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//recursionVariable=[Recursion |NAME]
		public Assignment getRecursionVariableAssignment_1() { return cRecursionVariableAssignment_1; }
		
		//[Recursion |NAME]
		public CrossReference getRecursionVariableRecursionCrossReference_1_0() { return cRecursionVariableRecursionCrossReference_1_0; }
		
		//NAME
		public RuleCall getRecursionVariableRecursionNAMETerminalRuleCall_1_0_1() { return cRecursionVariableRecursionNAMETerminalRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRoleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoleNAMETerminalRuleCall_2_0 = (RuleCall)cRoleAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMessagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMessagesMessageParserRuleCall_4_0 = (RuleCall)cMessagesAssignment_4.eContents().get(0);
		private final Assignment cBranchAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBranchProtocolParserRuleCall_5_0 = (RuleCall)cBranchAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOrKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMessagesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMessagesMessageParserRuleCall_7_2_0 = (RuleCall)cMessagesAssignment_7_2.eContents().get(0);
		private final Assignment cBranchAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cBranchProtocolParserRuleCall_7_3_0 = (RuleCall)cBranchAssignment_7_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		
		//Choice:
		//    // for choice
		//    'choice' 'at' role=NAME '{'
		//        messages+=Message
		//        branch+=Protocol
		//    '}' ('or' '{'
		//        messages+=Message
		//        branch+=Protocol
		//    '}')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// for choice
		//'choice' 'at' role=NAME '{'
		//    messages+=Message
		//    branch+=Protocol
		//'}' ('or' '{'
		//    messages+=Message
		//    branch+=Protocol
		//'}')*
		public Group getGroup() { return cGroup; }
		
		//// for choice
		//'choice'
		public Keyword getChoiceKeyword_0() { return cChoiceKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//role=NAME
		public Assignment getRoleAssignment_2() { return cRoleAssignment_2; }
		
		//NAME
		public RuleCall getRoleNAMETerminalRuleCall_2_0() { return cRoleNAMETerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//messages+=Message
		public Assignment getMessagesAssignment_4() { return cMessagesAssignment_4; }
		
		//Message
		public RuleCall getMessagesMessageParserRuleCall_4_0() { return cMessagesMessageParserRuleCall_4_0; }
		
		//branch+=Protocol
		public Assignment getBranchAssignment_5() { return cBranchAssignment_5; }
		
		//Protocol
		public RuleCall getBranchProtocolParserRuleCall_5_0() { return cBranchProtocolParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('or' '{'
		//       messages+=Message
		//       branch+=Protocol
		//   '}')*
		public Group getGroup_7() { return cGroup_7; }
		
		//'or'
		public Keyword getOrKeyword_7_0() { return cOrKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//messages+=Message
		public Assignment getMessagesAssignment_7_2() { return cMessagesAssignment_7_2; }
		
		//Message
		public RuleCall getMessagesMessageParserRuleCall_7_2_0() { return cMessagesMessageParserRuleCall_7_2_0; }
		
		//branch+=Protocol
		public Assignment getBranchAssignment_7_3() { return cBranchAssignment_7_3; }
		
		//Protocol
		public RuleCall getBranchProtocolParserRuleCall_7_3_0() { return cBranchProtocolParserRuleCall_7_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
	}
	public class ForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.ForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEachRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEachRoleRoleParserRuleCall_1_0 = (RuleCall)cEachRoleAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRoleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRoleRoleMultipleCrossReference_3_0 = (CrossReference)cRoleAssignment_3.eContents().get(0);
		private final RuleCall cRoleRoleMultipleNAMETerminalRuleCall_3_0_1 = (RuleCall)cRoleRoleMultipleCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBranchAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBranchProtocolParserRuleCall_5_0 = (RuleCall)cBranchAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForEach:
		//    'foreach' eachRole=Role 'in' role=[RoleMultiple | NAME] '{'
		//        (
		//            branch=Protocol
		//        )
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' eachRole=Role 'in' role=[RoleMultiple | NAME] '{'
		//    (
		//        branch=Protocol
		//    )
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//eachRole=Role
		public Assignment getEachRoleAssignment_1() { return cEachRoleAssignment_1; }
		
		//Role
		public RuleCall getEachRoleRoleParserRuleCall_1_0() { return cEachRoleRoleParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//role=[RoleMultiple | NAME]
		public Assignment getRoleAssignment_3() { return cRoleAssignment_3; }
		
		//[RoleMultiple | NAME]
		public CrossReference getRoleRoleMultipleCrossReference_3_0() { return cRoleRoleMultipleCrossReference_3_0; }
		
		//NAME
		public RuleCall getRoleRoleMultipleNAMETerminalRuleCall_3_0_1() { return cRoleRoleMultipleNAMETerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(
		//    branch=Protocol
		//)
		public Assignment getBranchAssignment_5() { return cBranchAssignment_5; }
		
		//Protocol
		public RuleCall getBranchProtocolParserRuleCall_5_0() { return cBranchProtocolParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeMessageTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPayloadAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPayloadPayloadParserRuleCall_2_0 = (RuleCall)cPayloadAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSenderAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSenderNAMETerminalRuleCall_5_0 = (RuleCall)cSenderAssignment_5.eContents().get(0);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cReceiverAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReceiverNAMETerminalRuleCall_7_0 = (RuleCall)cReceiverAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Message:
		//    type=MessageType '(' payload=Payload?')' 'from' sender=NAME 'to' receiver=NAME ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=MessageType '(' payload=Payload?')' 'from' sender=NAME 'to' receiver=NAME ';'
		public Group getGroup() { return cGroup; }
		
		//type=MessageType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//MessageType
		public RuleCall getTypeMessageTypeParserRuleCall_0_0() { return cTypeMessageTypeParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//payload=Payload?
		public Assignment getPayloadAssignment_2() { return cPayloadAssignment_2; }
		
		//Payload
		public RuleCall getPayloadPayloadParserRuleCall_2_0() { return cPayloadPayloadParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'from'
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }
		
		//sender=NAME
		public Assignment getSenderAssignment_5() { return cSenderAssignment_5; }
		
		//NAME
		public RuleCall getSenderNAMETerminalRuleCall_5_0() { return cSenderNAMETerminalRuleCall_5_0; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//receiver=NAME
		public Assignment getReceiverAssignment_7() { return cReceiverAssignment_7; }
		
		//NAME
		public RuleCall getReceiverNAMETerminalRuleCall_7_0() { return cReceiverNAMETerminalRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class MessageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.MessageType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCFPKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cREJECTPROPOSALKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cACCEPTPROPOSALKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFAILUREKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cINFORMDONEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cINFORMKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPROPOSEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//MessageType:
		//    'CFP'
		//    | 'REJECT-PROPOSAL'
		//    | 'ACCEPT-PROPOSAL'
		//    | 'FAILURE'
		//    | 'INFORM-DONE'
		//    | 'INFORM'
		//    | 'PROPOSE'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CFP'
		//| 'REJECT-PROPOSAL'
		//| 'ACCEPT-PROPOSAL'
		//| 'FAILURE'
		//| 'INFORM-DONE'
		//| 'INFORM'
		//| 'PROPOSE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CFP'
		public Keyword getCFPKeyword_0() { return cCFPKeyword_0; }
		
		//'REJECT-PROPOSAL'
		public Keyword getREJECTPROPOSALKeyword_1() { return cREJECTPROPOSALKeyword_1; }
		
		//'ACCEPT-PROPOSAL'
		public Keyword getACCEPTPROPOSALKeyword_2() { return cACCEPTPROPOSALKeyword_2; }
		
		//'FAILURE'
		public Keyword getFAILUREKeyword_3() { return cFAILUREKeyword_3; }
		
		//'INFORM-DONE'
		public Keyword getINFORMDONEKeyword_4() { return cINFORMDONEKeyword_4; }
		
		//'INFORM'
		public Keyword getINFORMKeyword_5() { return cINFORMKeyword_5; }
		
		//'PROPOSE'
		public Keyword getPROPOSEKeyword_6() { return cPROPOSEKeyword_6; }
	}
	public class PayloadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Payload");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPayloadAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_1_0_0 = (RuleCall)cTypesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_1_1_0 = (RuleCall)cTypesAssignment_1_1_1.eContents().get(0);
		
		//Payload:
		//    {Payload} (types+=Type (','types+=Type)*)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Payload} (types+=Type (','types+=Type)*)
		public Group getGroup() { return cGroup; }
		
		//{Payload}
		public Action getPayloadAction_0() { return cPayloadAction_0; }
		
		//(types+=Type (','types+=Type)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//types+=Type
		public Assignment getTypesAssignment_1_0() { return cTypesAssignment_1_0; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_1_0_0() { return cTypesTypeParserRuleCall_1_0_0; }
		
		//(','types+=Type)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//types+=Type
		public Assignment getTypesAssignment_1_1_1() { return cTypesAssignment_1_1_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_1_1_1_0() { return cTypesTypeParserRuleCall_1_1_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cActionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Type:
		//    'int' | 'string' | 'action'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'string' | 'action'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//'action'
		public Keyword getActionKeyword_2() { return cActionKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final RolesElements pRoles;
	private final RoleElements pRole;
	private final RoleOneElements pRoleOne;
	private final RoleMultipleElements pRoleMultiple;
	private final ProtocolElements pProtocol;
	private final RecursionElements pRecursion;
	private final CloseRecursionElements pCloseRecursion;
	private final ChoiceElements pChoice;
	private final ForEachElements pForEach;
	private final MessageElements pMessage;
	private final MessageTypeElements pMessageType;
	private final PayloadElements pPayload;
	private final TypeElements pType;
	private final TerminalRule tNAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GlobalJadeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRoles = new RolesElements();
		this.pRole = new RoleElements();
		this.pRoleOne = new RoleOneElements();
		this.pRoleMultiple = new RoleMultipleElements();
		this.pProtocol = new ProtocolElements();
		this.pRecursion = new RecursionElements();
		this.pCloseRecursion = new CloseRecursionElements();
		this.pChoice = new ChoiceElements();
		this.pForEach = new ForEachElements();
		this.pMessage = new MessageElements();
		this.pMessageType = new MessageTypeElements();
		this.pPayload = new PayloadElements();
		this.pType = new TypeElements();
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.NAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.globaltype.globaljade.GlobalJade".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * file extension: gbjade
	// */
	//Model:
	//    // global protocol declaration
	//    'global' 'protocol' protocolName=NAME '(' roles=Roles ')'
	//    '{'
	//        protocol+=Protocol
	//    '}'
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Roles:
	//    roles+=Role (',' roles+=Role)*
	//;
	public RolesElements getRolesAccess() {
		return pRoles;
	}
	
	public ParserRule getRolesRule() {
		return getRolesAccess().getRule();
	}
	
	//Role:
	//    RoleOne | RoleMultiple
	//;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//RoleOne:
	//    'role' name=NAME
	//;
	public RoleOneElements getRoleOneAccess() {
		return pRoleOne;
	}
	
	public ParserRule getRoleOneRule() {
		return getRoleOneAccess().getRule();
	}
	
	//RoleMultiple:
	//    'multrole' name=NAME ':' ref=[RoleOne | NAME]
	//;
	public RoleMultipleElements getRoleMultipleAccess() {
		return pRoleMultiple;
	}
	
	public ParserRule getRoleMultipleRule() {
		return getRoleMultipleAccess().getRule();
	}
	
	//Protocol:
	//    {Protocol} (actions+=(Message
	//               | Choice
	//               | ForEach
	//               | Recursion
	//               | CloseRecursion
	//               ))*
	//;
	public ProtocolElements getProtocolAccess() {
		return pProtocol;
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}
	
	//Recursion:
	//    'rec' name=NAME ':'
	//;
	public RecursionElements getRecursionAccess() {
		return pRecursion;
	}
	
	public ParserRule getRecursionRule() {
		return getRecursionAccess().getRule();
	}
	
	//CloseRecursion:
	//    'loop' recursionVariable=[Recursion |NAME] ';'
	//;
	public CloseRecursionElements getCloseRecursionAccess() {
		return pCloseRecursion;
	}
	
	public ParserRule getCloseRecursionRule() {
		return getCloseRecursionAccess().getRule();
	}
	
	//Choice:
	//    // for choice
	//    'choice' 'at' role=NAME '{'
	//        messages+=Message
	//        branch+=Protocol
	//    '}' ('or' '{'
	//        messages+=Message
	//        branch+=Protocol
	//    '}')*
	//;
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}
	
	//ForEach:
	//    'foreach' eachRole=Role 'in' role=[RoleMultiple | NAME] '{'
	//        (
	//            branch=Protocol
	//        )
	//    '}'
	//;
	public ForEachElements getForEachAccess() {
		return pForEach;
	}
	
	public ParserRule getForEachRule() {
		return getForEachAccess().getRule();
	}
	
	//Message:
	//    type=MessageType '(' payload=Payload?')' 'from' sender=NAME 'to' receiver=NAME ';'
	//;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//MessageType:
	//    'CFP'
	//    | 'REJECT-PROPOSAL'
	//    | 'ACCEPT-PROPOSAL'
	//    | 'FAILURE'
	//    | 'INFORM-DONE'
	//    | 'INFORM'
	//    | 'PROPOSE'
	//;
	public MessageTypeElements getMessageTypeAccess() {
		return pMessageType;
	}
	
	public ParserRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}
	
	//Payload:
	//    {Payload} (types+=Type (','types+=Type)*)
	//;
	public PayloadElements getPayloadAccess() {
		return pPayload;
	}
	
	public ParserRule getPayloadRule() {
		return getPayloadAccess().getRule();
	}
	
	//Type:
	//    'int' | 'string' | 'action'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal NAME:
	//    ('A'..'Z')+ ('a'..'z')*
	//;
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
