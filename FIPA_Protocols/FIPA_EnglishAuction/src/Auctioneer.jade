module agents
import EnglishAuctionOntology.EnglishAuction

# agent Auctioneer for English Auction protocol.
#
# Riccardo Nazzari - 20044680
agent Auctioneer uses ontology EnglishAuction
    
    # WaitBidders behaviour
    property waiting as WaitBidders
    # DecideAuction behaviour
    property decideAuction as DecideAuction
    # set of partecipants (Bidders agents)
    property endAuction as EndAuction
    
    property talkToWinner as TalkToWinner
    
    property bidders as set of aid
    # list of bidders that would bought that
    property bidderLastProp as aid
    # number of partecipants (customizable)
    property maxPartecipants = 4
    # name of the object to sell
    property nameObject as text
    # code of the object to sell
    property codeObject as integer
    # basic cost
    property baseCost = 15
    # minimum cost accepted
    property minCost = 50
    # increment of cost
    property incrCost = 4
    # timeOut for Auction
    property timeOut = "PT10S" as duration
    # variable for maintain the old price of the object
    #property oldCost = baseCost
    # flag to know if someone will bought the object at that price
    property someoneBought = false
    
    # on create 
    #   activate the WaitBidders behaviour, waiting for a proper number of partecipants
    #   to start the auction.
    on create with nameObject as text, codeObject as integer do
        nameObject of this = nameObject
        codeObject of this = codeObject
        activate waiting
        
        
# cyclic behaviour used for waiting bidders
cyclic behaviour WaitBidders
    for agent Auctioneer
    uses ontology EnglishAuction
    
    # event-handler for inform message
    #   this message is sent from a bidder to communicate his partecipation to the auction
    #   if the number of partecipants necessary is reached, a change of behaviour is operated
    #   and WaitBidders will be deactivated.
    on message inform(Partecipating) do
        add sender of message to bidders
        log "senders: " + bidders
        if size of bidders = maxPartecipants do
            log "Max number of partecipants reached (" + size of bidders + "). Starting auction..."
            do informBidders
            activate Auction
            deactivate this
    
    # a simple procedure used to send an inform message to bidders        
    procedure informBidders do
        send message inform(StartAuction) to bidders

# cyclic behaviour used to handle the Auction                
cyclic behaviour Auction
    for agent Auctioneer
    uses ontology EnglishAuction
    
    # used to let know where Auction will end
    property nextTimeOut as timestamp
    
    on create do nothing
    
    # event-handler activate
    #   assign a new cost of the object following the increment
    #   compute new timeOut
    #   activate procedure to send a cfp message
    on activate do
        #baseCost = baseCost #+ incrCost
        do sendProposeAuction
    
    # event-handler for message propose
    #   save that the sender of message would bought it
    on message propose(AuctionTime(ObjectOnAuction(namePropose, 
                                                   codePropose, 
                                                   priceProposed, 
                                                   bidder, 
                                                   timeExpire
                                                   )), Propose) when 
                                                                codePropose = codeObject 
                                                                and namePropose = nameObject 
                                                                do
        log "Received from " + name of sender of message + " offer of: " + priceProposed
        if priceProposed = baseCost do
            send message accept_proposal(AuctionTime(ObjectOnAuction(namePropose, 
                                                           codePropose, 
                                                           priceProposed, 
                                                           name of sender of message, 
                                                           timeExpire
                                                           )), AcceptPropose) to sender of message
            bidderLastProp = sender of message
            someoneBought = true
            baseCost = priceProposed + incrCost
            log "New cost: " + baseCost
            do sendProposeAuction
        else do
            send message reject_proposal(AuctionTime(ObjectOnAuction(namePropose, 
                                                            codePropose, 
                                                            priceProposed, 
                                                            name of bidderLastProp, 
                                                            timeExpire
                                                            )), RefusePropose) to sender of message
        #do sendProposeAuction
    # procedure used to send a new cfg message
    #   it also activate a one-shot behaviour that decides if re-iterate the process or not
    procedure sendProposeAuction do
        
        nextTimeOut = now + timeOut
        log"nextTimeOut: " + nextTimeOut
        send message cfp(AuctionTime(ObjectOnAuction(nameObject, 
                                                     codeObject, 
                                                     baseCost, 
                                                     name of bidderLastProp, 
                                                     nextTimeOut
                                                     )), StartAuction) to bidders
        activate decideAuction after timeOut
        

# one-shot behaviour used to decide if terminate an auction or not        
one shot behaviour DecideAuction
    for agent Auctioneer
    uses ontology EnglishAuction
    
    # code executed when activated
    #   deactivate the Auction behaviour
    on execute do
        deactivate Auction
        # this condition is going to be changed
        # in the protocol, termination takes place when there isn't someone who would bought this item
        # so I need a special list of the previous auction with the previous price ???
        #if size of listOfBoughters â‰  0 do
        #log"old: " + oldCost + "baseCost: " + baseCost
        if someoneBought = false do
            activate endAuction
        # else Auction behaviour is activated, also listOfBoughters is cleared
        # price will be highter and the cycle re-start
        else do
            someoneBought = false
            activate Auction
            
one shot behaviour EndAuction
    for agent Auctioneer
    uses ontology EnglishAuction
    
    on execute do
        send message inform(EndAuctionMessage) to bidders
        log "Auction ended."
        activate talkToWinner after "PT2S" as duration
                
one shot behaviour TalkToWinner
    for agent Auctioneer
    uses ontology EnglishAuction
    
    on execute do
        if baseCost-incrCost > minCost do
                log "Yayyy, someone bought it! " + name of bidderLastProp + " congratulations!"
                log "Sold for: " + (baseCost-incrCost)
                send message request(WinCost(baseCost-incrCost)) to bidderLastProp
        else do
                log "Can't sold it, offer is too low."
                send message inform(NotEnoughMoney) to bidderLastProp