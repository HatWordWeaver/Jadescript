/*
 * generated by Xtext 2.34.0
 */
package org.xtext.globaltype.globaljade.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GlobalJadeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Model");
		private final Assignment cProtocolsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProtocolsProtocolsParserRuleCall_0 = (RuleCall)cProtocolsAssignment.eContents().get(0);
		
		///*
		// * gbjade
		// */
		//Model:
		//    protocols+=Protocols*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//protocols+=Protocols*
		public Assignment getProtocolsAssignment() { return cProtocolsAssignment; }
		
		//Protocols
		public RuleCall getProtocolsProtocolsParserRuleCall_0() { return cProtocolsProtocolsParserRuleCall_0; }
	}
	public class ProtocolsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Protocols");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProtocolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameGENERAL_NAMETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRolesRoleParserRuleCall_4_0 = (RuleCall)cRolesAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Protocols:
		//    'global' 'protocol' name=GENERAL_NAME '('
		//    roles+=Role+
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' 'protocol' name=GENERAL_NAME '('
		//roles+=Role+
		//')'
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//'protocol'
		public Keyword getProtocolKeyword_1() { return cProtocolKeyword_1; }
		
		//name=GENERAL_NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//GENERAL_NAME
		public RuleCall getNameGENERAL_NAMETerminalRuleCall_2_0() { return cNameGENERAL_NAMETerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//roles+=Role+
		public Assignment getRolesAssignment_4() { return cRolesAssignment_4; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_4_0() { return cRolesRoleParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRoleGENERAL_NAMETerminalRuleCall_1_0 = (RuleCall)cRoleAssignment_1.eContents().get(0);
		
		//Role:
		//    'role' role=GENERAL_NAME
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'role' role=GENERAL_NAME
		public Group getGroup() { return cGroup; }
		
		//'role'
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//role=GENERAL_NAME
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }
		
		//GENERAL_NAME
		public RuleCall getRoleGENERAL_NAMETerminalRuleCall_1_0() { return cRoleGENERAL_NAMETerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ProtocolsElements pProtocols;
	private final RoleElements pRole;
	private final TerminalRule tGENERAL_NAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GlobalJadeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProtocols = new ProtocolsElements();
		this.pRole = new RoleElements();
		this.tGENERAL_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globaltype.globaljade.GlobalJade.GENERAL_NAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.globaltype.globaljade.GlobalJade".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * gbjade
	// */
	//Model:
	//    protocols+=Protocols*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Protocols:
	//    'global' 'protocol' name=GENERAL_NAME '('
	//    roles+=Role+
	//    ')'
	//;
	public ProtocolsElements getProtocolsAccess() {
		return pProtocols;
	}
	
	public ParserRule getProtocolsRule() {
		return getProtocolsAccess().getRule();
	}
	
	//Role:
	//    'role' role=GENERAL_NAME
	//;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//terminal GENERAL_NAME:
	//    ('A'..'Z')+ ('a'..'z')*
	//;
	public TerminalRule getGENERAL_NAMERule() {
		return tGENERAL_NAME;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
