/*
 * generated by Xtext 2.34.0
 */
grammar InternalGlobalJade;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.globaltype.globaljade.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.globaltype.globaljade.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.globaltype.globaljade.services.GlobalJadeGrammarAccess;

}
@parser::members {
	private GlobalJadeGrammarAccess grammarAccess;

	public void setGrammarAccess(GlobalJadeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getProtocolsAssignment()); }
		(rule__Model__ProtocolsAssignment)*
		{ after(grammarAccess.getModelAccess().getProtocolsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProtocols
entryRuleProtocols
:
{ before(grammarAccess.getProtocolsRule()); }
	 ruleProtocols
{ after(grammarAccess.getProtocolsRule()); } 
	 EOF 
;

// Rule Protocols
ruleProtocols 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProtocolsAccess().getGroup()); }
		(rule__Protocols__Group__0)
		{ after(grammarAccess.getProtocolsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRole
entryRuleRole
:
{ before(grammarAccess.getRoleRule()); }
	 ruleRole
{ after(grammarAccess.getRoleRule()); } 
	 EOF 
;

// Rule Role
ruleRole 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRoleAccess().getGroup()); }
		(rule__Role__Group__0)
		{ after(grammarAccess.getRoleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Protocols__Group__0__Impl
	rule__Protocols__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolsAccess().getGlobalKeyword_0()); }
	'global'
	{ after(grammarAccess.getProtocolsAccess().getGlobalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Protocols__Group__1__Impl
	rule__Protocols__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolsAccess().getProtocolKeyword_1()); }
	'protocol'
	{ after(grammarAccess.getProtocolsAccess().getProtocolKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Protocols__Group__2__Impl
	rule__Protocols__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolsAccess().getNameAssignment_2()); }
	(rule__Protocols__NameAssignment_2)
	{ after(grammarAccess.getProtocolsAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Protocols__Group__3__Impl
	rule__Protocols__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolsAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getProtocolsAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Protocols__Group__4__Impl
	rule__Protocols__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getProtocolsAccess().getRolesAssignment_4()); }
		(rule__Protocols__RolesAssignment_4)
		{ after(grammarAccess.getProtocolsAccess().getRolesAssignment_4()); }
	)
	(
		{ before(grammarAccess.getProtocolsAccess().getRolesAssignment_4()); }
		(rule__Protocols__RolesAssignment_4)*
		{ after(grammarAccess.getProtocolsAccess().getRolesAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Protocols__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProtocolsAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getProtocolsAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Role__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group__0__Impl
	rule__Role__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getRoleKeyword_0()); }
	'role'
	{ after(grammarAccess.getRoleAccess().getRoleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getRoleAssignment_1()); }
	(rule__Role__RoleAssignment_1)
	{ after(grammarAccess.getRoleAccess().getRoleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProtocolsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProtocolsProtocolsParserRuleCall_0()); }
		ruleProtocols
		{ after(grammarAccess.getModelAccess().getProtocolsProtocolsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProtocolsAccess().getNameGENERAL_NAMETerminalRuleCall_2_0()); }
		RULE_GENERAL_NAME
		{ after(grammarAccess.getProtocolsAccess().getNameGENERAL_NAMETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocols__RolesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProtocolsAccess().getRolesRoleParserRuleCall_4_0()); }
		ruleRole
		{ after(grammarAccess.getProtocolsAccess().getRolesRoleParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__RoleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoleAccess().getRoleGENERAL_NAMETerminalRuleCall_1_0()); }
		RULE_GENERAL_NAME
		{ after(grammarAccess.getRoleAccess().getRoleGENERAL_NAMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_GENERAL_NAME : ('A'..'Z')+ ('a'..'z')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
